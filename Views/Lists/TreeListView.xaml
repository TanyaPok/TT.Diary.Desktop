<UserControl x:Class="TT.Diary.Desktop.Views.Lists.TreeListView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:command="http://www.galasoft.ch/mvvmlight"
             xmlns:s="clr-namespace:TT.Diary.Desktop.Views.Controls"
             xmlns:c="clr-namespace:TT.Diary.Desktop.Converters"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0.2*" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="0.8*" />
        </Grid.ColumnDefinitions>

        <TreeView Grid.Column="0" ItemsSource="{Binding Data, Mode=TwoWay}"
                  SelectedValuePath="Description"
                  Name="listTreeView"
                  Background="{DynamicResource Base.Background}"
                  BorderThickness="0"
                  ItemContainerStyle="{StaticResource TreeViewItemStyle}"
                  AllowDrop="True">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseMove">
                    <command:EventToCommand Command="{Binding DragAndDropAlgorithm.MouseMoveObjectCommand}"
                                            PassEventArgsToCommand="True" />
                </i:EventTrigger>
                <i:EventTrigger EventName="DragEnter">
                    <command:EventToCommand Command="{Binding DragAndDropAlgorithm.DragEnterOverLeaveObjectCommand}"
                                            PassEventArgsToCommand="True" />
                </i:EventTrigger>
                <i:EventTrigger EventName="DragOver">
                    <command:EventToCommand Command="{Binding DragAndDropAlgorithm.DragEnterOverLeaveObjectCommand}"
                                            PassEventArgsToCommand="True" />
                </i:EventTrigger>
                <i:EventTrigger EventName="DragLeave">
                    <command:EventToCommand Command="{Binding DragAndDropAlgorithm.DragEnterOverLeaveObjectCommand}"
                                            PassEventArgsToCommand="True" />
                </i:EventTrigger>
                <i:EventTrigger EventName="Drop">
                    <command:EventToCommand Command="{Binding DragAndDropAlgorithm.DropObjectCommand}"
                                            PassEventArgsToCommand="True" />
                </i:EventTrigger>
                <i:EventTrigger EventName="SelectedItemChanged">
                    <command:EventToCommand Command="{Binding SelectedCategoryChangedCommand}"
                                            PassEventArgsToCommand="True" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Subcategories}">
                    <ContentPresenter Content="{Binding}">
                        <ContentPresenter.ContentTemplate>
                            <DataTemplate DataType="{x:Type TreeViewItem}">
                                <Grid>
                                    <TextBlock Text="{Binding Description}" TextTrimming="WordEllipsis" Width="130">
                                        <TextBlock.Resources>
                                            <Style TargetType="{x:Type TextBlock}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsReadOnlyMode}" Value="false">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsReadOnlyMode}" Value="true">
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                            <s:DataContextSpy
                                                DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"
                                                x:Key="Spy" />
                                        </TextBlock.Resources>
                                        <TextBlock.ContextMenu>
                                            <ContextMenu>
                                                <MenuItem Header="{Binding InitializeNestedCategoryCreateCommand.Name}"
                                                          Command="{Binding InitializeNestedCategoryCreateCommand}">
                                                    <MenuItem.Icon>
                                                        <Image
                                                            Source="{Binding InitializeNestedCategoryCreateCommand.ImgUrl}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Header="{Binding InitializeNestedCategoryUpdateCommand.Name}"
                                                          Command="{Binding InitializeNestedCategoryUpdateCommand}">
                                                    <MenuItem.Icon>
                                                        <Image
                                                            Source="{Binding InitializeNestedCategoryUpdateCommand.ImgUrl}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Header="{Binding NestedCategoryDeleteCommand.Name}"
                                                          DataContext="{Binding DataContext,Source={StaticResource Spy}}"
                                                          CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=DataContext}"
                                                          Command="{Binding NestedCategoryDeleteCommand}">
                                                    <MenuItem.Icon>
                                                        <Image Source="{Binding NestedCategoryDeleteCommand.ImgUrl}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                            </ContextMenu>
                                        </TextBlock.ContextMenu>
                                    </TextBlock>
                                    <TextBox
                                        Text="{Binding Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"
                                        Validation.ErrorTemplate="{StaticResource errorTemplate}"
                                        MinWidth="50">
                                        <TextBox.Resources>
                                            <Style TargetType="{x:Type TextBox}">
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding Path=IsReadOnlyMode}"
                                                                       Value="false" />
                                                            <Condition
                                                                Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=IsSelected}"
                                                                Value="true" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="BorderThickness" Value="1,1,1,0" />
                                                    </MultiDataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding Path=IsReadOnlyMode}"
                                                                       Value="false" />
                                                            <Condition
                                                                Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=IsSelected}"
                                                                Value="false" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="BorderThickness" Value="1" />
                                                    </MultiDataTrigger>
                                                    <DataTrigger Binding="{Binding IsReadOnlyMode}" Value="false">
                                                        <Setter Property="Visibility" Value="Visible" />
                                                        <Setter Property="FocusManager.FocusedElement"
                                                                Value="{Binding RelativeSource={RelativeSource Self}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsReadOnlyMode}" Value="true">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Resources>
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="LostFocus">
                                                <i:InvokeCommandAction Command="{Binding NestedCategorySaveCommand}" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>
                                </Grid>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>
                    </ContentPresenter>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>

        <GridSplitter Grid.Column="1" Width="5" HorizontalAlignment="Stretch">
            <GridSplitter.Template>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Grid>
                        <Border BorderThickness="1" BorderBrush="{DynamicResource Button.MouseOver.Border}">
                            <TextBlock Text="⁞" VerticalAlignment="Center"
                                       Foreground="{DynamicResource Button.MouseOver.Border}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </GridSplitter.Template>
        </GridSplitter>

        <Grid Grid.Column="2" MinWidth="15" DataContext="{Binding ElementName=listTreeView, Path=SelectedItem}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <TextBlock Grid.Row="0" Style="{DynamicResource ControlTitleTextBlockStyle}" HorizontalAlignment="Center"
                       TextWrapping="Wrap"
                       Text="{Binding Description}" />
            <ListBox Grid.Row="1" ItemsSource="{Binding Items}" Style="{StaticResource ListBoxStyle}" Margin="5,0,0,0">
                <ListBox.Resources>
                    <c:BoolVisibilityConverter x:Key="boolVisibilityConverter" />
                    <StackPanel x:Shared="false" x:Key="ListBox.ContentPresenterOperations" Orientation="Horizontal"
                                HorizontalAlignment="Right">
                        <Button Command="{Binding SaveCommand}"
                                CommandParameter="{Binding}"
                                Style="{StaticResource ButtonStyle}" Margin="0,0,5,0">
                            <StackPanel Orientation="Horizontal">
                                <Image Source="{Binding SaveCommand.ImgUrl}" Width="16" Height="16" />
                                <TextBlock Text="{Binding SaveCommand.Name}"
                                           Style="{StaticResource LabelTextBlockStyle}" />
                            </StackPanel>
                        </Button>
                        <Button Command="{Binding TrackersRemoveCommand}"
                                CommandParameter="{Binding}"
                                Visibility="{Binding IsTracked, Converter={StaticResource boolVisibilityConverter}}"
                                Style="{StaticResource ButtonStyle}" Margin="0,0,5,0">
                            <StackPanel Orientation="Horizontal">
                                <Image Source="{Binding TrackersRemoveCommand.ImgUrl}" Width="16" Height="16" />
                                <TextBlock Text="{Binding TrackersRemoveCommand.Name}"
                                           Style="{StaticResource LabelTextBlockStyle}" />
                            </StackPanel>
                        </Button>
                        <Button
                            Command="{Binding DataContext.RemoveItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                            CommandParameter="{Binding}"
                            Style="{StaticResource ButtonStyle}">
                            <StackPanel Orientation="Horizontal">
                                <Image
                                    Source="{Binding DataContext.RemoveItemCommand.ImgUrl, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                    Width="16" Height="16" />
                                <TextBlock
                                    Text="{Binding DataContext.RemoveItemCommand.Name, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                    Style="{StaticResource LabelTextBlockStyle}" />
                            </StackPanel>
                        </Button>
                    </StackPanel>
                </ListBox.Resources>
            </ListBox>
        </Grid>
    </Grid>
</UserControl>